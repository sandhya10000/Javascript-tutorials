1.
=> npm init -y
npm install express
for nodemon
 npm i nodemon 
 Server connection using nodeJs with expressJS?
 Solution: - 
const express = require('express');
const PORT = 8000;
const app =express();
app.listen(PORT, ()=>{
    console.log(`Server is running at ${PORT}`);
});

2. Difference between promise all and promise Any
Promise all: - Wait the all sucessive result and execute it parallely
If any promise fails, the entire Promise.all() fails with that error.

A) Promise.all() — Run Promises in Parallel

 for example:-
const p1 = Promise.resolve("first);
const p2 = Promise.resolve("second);
const p3 = Promise.resolve("third);

Promise.all([p1,p2,p3])
.then(data=>{
    console.log(data)
})  //output: -['first', 'second', 'third']

B) Promise.any() -
Returns the first fulfilled promise, ignores rejections.

const p1 = Promise.reject('fails')
const p2 = Promise.reject('fails')
const p3 =Promise.resolve('success')
Promise.any([p1,p2,p3])
.then(result=> {
    console.log(result)
}) // output: - success

C) Promise.race() - 
Return first settled promise either resolve or reject

const p1 = new Promise((resolve) => setTimeout(() => resolve("first"), 1500));
const p2 = new Promise((resolve) => setTimeout(() => resolve("seconds"), 500));
Promise.race([p1, p2]).then((result) => {
  console.log(result);
});
//output- seconds
D) Promise.allSettled() -
 return all fail and success response

 const p1 =new Promise.resolve('success');
 const p2 = new Promise.reject('fail');
 const p3 =new Promise.resolve('done');

Promise.allSettled([p1, p2, p3]).then((result) => {
  console.log(result);
});

//output { status: 'fulfilled', value: 'Success' },
  { status: 'rejected', reason: 'Failed' },
  { status: 'fulfilled', value: 'Done' }


  | Promise Method         | Description                                      |
| ---------------------- | ------------------------------------------------ |
| `new Promise()`        | Create a new Promise                             |
| `.then()`              | Handle success                                   |
| `.catch()`             | Handle error                                     |
| `.finally()`           | Always runs after then/catch                     |
| `Promise.all()`        | Wait for all promises, fails fast                |
| `Promise.allSettled()` | Wait for all, returns both fulfilled/rejected    |
| `Promise.race()`       | Returns first settled (win or fail)              |
| `Promise.any()`        | Returns first **successful**, ignores rejections |



Q.3 Difference between null and undefined
Example
let a = null;
let b; // b is undefined

Q.4) Explain Promise
Solution:- Promise  is a JS object is an eventual completion or failure of asynchronous operation.
States:
pending → operation ongoing


fulfilled → operation successful


rejected → operation failed

function fetchData() {
  return new Promise((reject, resolve) => {
    setTimeout(() => {
      let success = true;
      if (success) resolve("successful");
      else {
        reject("Error Ocurred");
      }
    }, 4000);
  });
}
fetchData()
  .then((result) => {
    console.log(result, "resultttttttttttttttt");
  })
  .catch((error) => {
    console.log(error);
  });
// output :- successful


Q.5) Difference between == and ===
let a = "5";
let b = 5;
console.log(a ==b);// true because this checks value not type ; loose equality
console.log(a===b);// false because this checks value plus type; strict eqality 

Q.6) Callback function
function Sum(a, b) {
  console.log(a + b);
}

function calculator(a, b, sumcallback) {
  sumcallback(a, b);
}
calculator(1, 2, (a, b) => {
  console.log(a + b);
});

Q.7) Spread and Rest operator
Spread:- 
const user = { name: "Alice", age: 25 };
const updatedUser = { ...user, age: 26 }; // Copy and update

console.log(updatedUser); // { name: "Alice", age: 26 }

Rest:- 
const [first, ...others] = [10, 20, 30, 40];
console.log(first);  // 10
console.log(others); // [20, 30, 40]

 | Feature | Spread (`...`)                  | Rest (`...`)                   |
| ------- | ------------------------------- | ------------------------------ |
| Purpose | Expands values                  | Gathers values                 |
| Used in | Arrays, Objects, Function calls | Function params, Destructuring |
| Output  | Individual elements             | Array of grouped elements      |

