1) NODE MODULES: - Node modules is a folder when you 
install packages using node package manager (npm)
 they are stored inside the node_modules
then node modules install all dependencies and 
sub dependencies.
npm install express


2)Package.Json : -
 Package.json file is root file of your project or app 
 it is automatically generate when you run the command
 " npm init" its manage your project dependencies , 
 script and setting.

3)Package.lock.json: -
package lock json is  containe exact version of your
 project depandencies.

4)
//Example of closure
/**
 * Closure is combination of function bundled together 
 with it surrounding state.
 * In other words javascript closure gives a function 
 access to its outer scope of variable.
 */

function fetchdata() {
  var name = "sandhya";
  function displayName() {
    console.log(name);
  }
  displayName();
}

fetchdata();


//To find duplicate value from a string

// Online Javascript Editor for free
// Write, Edit and Run your Javascript code using JS Online Compiler

//To find duplicate value from a string

let name = "ssaaaannndddyyh"
let charCount = {};
let duplicate = [];
let unique = [];
for(let char of name){
   charCount[char] = (charCount[char] || 0) + 1;
    console.log(charCount)
}

for(let key in charCount){
    if(charCount[key] > 1){
        duplicate.push(key)
    }
    else{
        unique.push(key)
    }
}
console.log(duplicate) //[ 's', 'a', 'n', 'd', 'y' ]
console.log(unique) //  [ 'h' ]



// Error Handling Techniques
try{
    let data = JSON.parse("Invalid Data)
    console.log(data)
}
catch(error){
console.error(error)
}

//Error handling with Promises
let promise  = new Promise((resolve,reject)=>{
    reject("Something went wrong!.)
});

promise
.then(data => console.log(data))
.catch(error => console.log(errror))

//Error handling with async/await

async function fetchdata() {
  try {
    let result = await Promise.reject("reject error");
    console.log(result);
  } catch (error) {
    console.log(error);
  }
}

fetchdata();
//output : reject error



/**
 * Promises are the foundation of asynchronous programming 
 are in modern javascript.
 * A promise is an object returned by an asynchronous 
 function which represents the current state of the operation
 * A promise is object provide that handled the success or failure 
 of the operation.
 */

const fetchData = new Promise((resolve, reject) => {
  let success = true;
  resolve("succeeessssssss");
});
fetchData
  .then((data) => console.log(data))
  .catch((error) => console.log(error));

  There are 4 type of promise 
  1) Promise.all(): 
  return all successive promise parallely when one of promise 
  fail then entire fails.

  const p1 = Promise.resolve("one")
  const p2 = Promise.resolve("two")
  const p3 = Promise.resolve("three")

  Promise.all([p1,p2,p3]).
  then(data=>console.log(data))

  //Another example
  const p1 = Promise.resolve("first");
const p2 = Promise.resolve("second");
const p3 = Promise.reject("error reject");

Promise.all([p1, p2, p3])
  .then((data) => {
    console.log(data);
  })
  .catch((error) => console.log(error));


  2)promise.any():
  return  first fullfilment promise ignore the rejection.

 const p1 = Promise.resolve("one");
const p2 = Promise.reject("error");
const p3 = Promise.resolve("success");

Promise.any([p1, p2, p3]).then((data) => console.log(data));

3)Promise.race():
return first settle response either resolve or reject.

const p1 = Promise.reject("error one");
const p2 = Promise.reject("error");
const p3 = Promise.resolve("success");

Promise.race([p1, p2, p3])
  .then((data) => console.log(data))
  .catch((error) => console.log(error));//output error one


4)Promise.allsettled():

return all fails or succesive response

const p1 = Promise.reject("error one");
const p2 = Promise.reject("error");
const p3 = Promise.resolve("success");

Promise.allSettled([p1, p2, p3])
  .then((data) => console.log(data))
  .catch((error) => console.log(error));

/**
 * Hoisting is a process to show default behavior of 
 declaration of functions , variable on the top of their scope.
 */

console.log(a);
greet();

var greet = () => {
  console.log("Good Morning");
};

var a; // undefined


/**
*/
let numbers = [1, 2, 3, 4];
numbers.forEach(num => {
  console.log(num * 2);  // Just prints, doesn't return new array
});
//output:
2
4
6
8


/**
 * async is used to declare a function as asynchronous
 * and return always promise
 *
 * await pause the execution time until promise resolve.
 *
 */

function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function fetchFunc() {
  console.log("start");
  await delay(3000);
  console.log("After 3 seconds");
}

fetchFunc();

/**
 * 1) What is Express.js and use?
 * Express.js is a flexible web application framework in nodejs
 * It provide features like routing, middleware and HTTP utility 
 * method , easy API building
 * used in RESTFUL API  , Single page application and full stack application.
 * 
 * 2) What is middleware and use?
 * Middleware is allow access foro request , response and next middleware
 * next middleware to pass control to next middleware
 * used for logging, authentication ,validation and error handling.
 * 
 * example :
 * app.use((req, res, next) => {
  console.log("Request URL:", req.url);
  next(); // pass to next middleware/route
});

3) What is the difference between app.use() and app.get() in Express?

app.use() → Mounts middleware (runs for all HTTP methods if path matches).
app.get() → Handles only GET requests for a specific route.

5) How do you handle error in middleware ?
use error handling wiith 4 parameter
req,err,res,next
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ error: "Something went wrong!" });
});

6) How do you handle different HTTP methods in Express?
app.get('/users', (req, res) => res.send("GET users"));
app.post('/users', (req, res) => res.send("POST user"));
app.put('/users/:id', (req, res) => res.send("Update user"));
app.delete('/users/:id', (req, res) => res.send("Delete user"));

7) How do you implement JWT authentication in Express.js?
const jwt = require("jsonwebtoken");

// Middleware
function auth(req, res, next) {
  const token = req.header("Authorization")?.split(" ")[1];
  if (!token) return res.status(401).send("Access Denied");

  try {
    const verified = jwt.verify(token, "secretkey");
    req.user = verified;
    next();
  } catch (err) {
    res.status(400).send("Invalid Token");
  }
}
8) How do you handle async errors in Express?
 Using try - catch block or use library like express-asyn-errors

 app.get('/data', async (req, res, next) => {
  try {
    let data = await fetchData();
    res.json(data);
  } catch (err) {
    next(err); // passes error to middleware
  }
});
9)How do you improve performance in an Express.js app?
Enable gzip compression (compression package).

Use caching (Redis, memory-cache).

Optimize DB queries.

Use load balancing + clustering (pm2 or Node cluster).

 */


// Self prepared interview question:
 function run(rawarr) {
  let res = [];
  for (let item of rawarr) {
    if (Array.isArray(item)) {
      const arr1 = run(item); // recursively flatten
      res.push(...arr1); // spread into result
    } else {
      res.push(item); // push normal value
    }
  }
  return res; // return final result
}

const arr = [1, [2, 3], [4, [5, 6]], 7];
console.log(run(arr));

2) const arr = [3,5,6];
const b =10;
arr.push(b);
console.log(arr)

// Output: [1, 2, 3, 4, 5, 6, 7]

3) typeof null and arr
4) == and ===
5) difference between map and forEach
6) difference between var, let and const variable.
7)trancasction
8)ORM AND ODM Difference